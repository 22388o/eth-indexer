// Code generated by mockery v1.0.0
package mocks

import common "github.com/ethereum/go-ethereum/common"
import mock "github.com/stretchr/testify/mock"
import model "github.com/getamis/eth-indexer/model"

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// DeleteAccounts provides a mock function with given fields: contractAddress, from, to
func (_m *Store) DeleteAccounts(contractAddress common.Address, from int64, to int64) error {
	ret := _m.Called(contractAddress, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, int64, int64) error); ok {
		r0 = rf(contractAddress, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransfer provides a mock function with given fields: contractAddress, from, to
func (_m *Store) DeleteTransfer(contractAddress common.Address, from int64, to int64) error {
	ret := _m.Called(contractAddress, from, to)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Address, int64, int64) error); ok {
		r0 = rf(contractAddress, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAccount provides a mock function with given fields: contractAddress, address, blockNr
func (_m *Store) FindAccount(contractAddress common.Address, address common.Address, blockNr ...int64) (*model.Account, error) {
	_va := make([]interface{}, len(blockNr))
	for _i := range blockNr {
		_va[_i] = blockNr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contractAddress, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.Account
	if rf, ok := ret.Get(0).(func(common.Address, common.Address, ...int64) *model.Account); ok {
		r0 = rf(contractAddress, address, blockNr...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address, ...int64) error); ok {
		r1 = rf(contractAddress, address, blockNr...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindERC20 provides a mock function with given fields: address
func (_m *Store) FindERC20(address common.Address) (*model.ERC20, error) {
	ret := _m.Called(address)

	var r0 *model.ERC20
	if rf, ok := ret.Get(0).(func(common.Address) *model.ERC20); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestAccounts provides a mock function with given fields: contractAddress, addrs
func (_m *Store) FindLatestAccounts(contractAddress common.Address, addrs [][]byte) ([]*model.Account, error) {
	ret := _m.Called(contractAddress, addrs)

	var r0 []*model.Account
	if rf, ok := ret.Get(0).(func(common.Address, [][]byte) []*model.Account); ok {
		r0 = rf(contractAddress, addrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, [][]byte) error); ok {
		r1 = rf(contractAddress, addrs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTransfer provides a mock function with given fields: contractAddress, address, blockNr
func (_m *Store) FindTransfer(contractAddress common.Address, address common.Address, blockNr ...int64) (*model.Transfer, error) {
	_va := make([]interface{}, len(blockNr))
	for _i := range blockNr {
		_va[_i] = blockNr[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, contractAddress, address)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *model.Transfer
	if rf, ok := ret.Get(0).(func(common.Address, common.Address, ...int64) *model.Transfer); ok {
		r0 = rf(contractAddress, address, blockNr...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Transfer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Address, common.Address, ...int64) error); ok {
		r1 = rf(contractAddress, address, blockNr...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertAccount provides a mock function with given fields: _a0
func (_m *Store) InsertAccount(_a0 *model.Account) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Account) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertERC20 provides a mock function with given fields: code
func (_m *Store) InsertERC20(code *model.ERC20) error {
	ret := _m.Called(code)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.ERC20) error); ok {
		r0 = rf(code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertTransfer provides a mock function with given fields: event
func (_m *Store) InsertTransfer(event *model.Transfer) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Transfer) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListERC20 provides a mock function with given fields:
func (_m *Store) ListERC20() ([]*model.ERC20, error) {
	ret := _m.Called()

	var r0 []*model.ERC20
	if rf, ok := ret.Get(0).(func() []*model.ERC20); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ERC20)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
