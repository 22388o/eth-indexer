// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/maichain/eth-indexer/indexer/pb/transaction_receipt.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TransactionReceipt struct {
	ID                uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id,omitempty" gorm:"primary_key" deepequal:"-"`
	Root              []byte `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty" gorm:"column:root"`
	Status            uint32 `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty" gorm:"column:status"`
	CumulativeGasUsed uint64 `protobuf:"varint,5,opt,name=cumulative_gas_used,json=cumulativeGasUsed,proto3" json:"cumulative_gas_used,omitempty" gorm:"column:cumulative_gas_used"`
	Bloom             []byte `protobuf:"bytes,6,opt,name=bloom,proto3" json:"bloom,omitempty" gorm:"column:bloom"`
	TxHash            string `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" gorm:"column:tx_hash;size:255"`
	ContractAddress   string `protobuf:"bytes,8,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty" gorm:"column:contract_address;size:255"`
	GasUsed           uint64 `protobuf:"varint,9,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty" gorm:"column:gas_used"`
}

func (m *TransactionReceipt) Reset()      { *m = TransactionReceipt{} }
func (*TransactionReceipt) ProtoMessage() {}
func (*TransactionReceipt) Descriptor() ([]byte, []int) {
	return fileDescriptorTransactionReceipt, []int{0}
}

func init() {
	proto.RegisterType((*TransactionReceipt)(nil), "pb.TransactionReceipt")
}
func (m *TransactionReceipt) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionReceipt) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(m.ID))
	}
	if len(m.Root) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(len(m.Root)))
		i += copy(dAtA[i:], m.Root)
	}
	if m.Status != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(m.Status))
	}
	if m.CumulativeGasUsed != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(m.CumulativeGasUsed))
	}
	if len(m.Bloom) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(len(m.Bloom)))
		i += copy(dAtA[i:], m.Bloom)
	}
	if len(m.TxHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(len(m.TxHash)))
		i += copy(dAtA[i:], m.TxHash)
	}
	if len(m.ContractAddress) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(len(m.ContractAddress)))
		i += copy(dAtA[i:], m.ContractAddress)
	}
	if m.GasUsed != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTransactionReceipt(dAtA, i, uint64(m.GasUsed))
	}
	return i, nil
}

func encodeVarintTransactionReceipt(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TransactionReceipt) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTransactionReceipt(uint64(m.ID))
	}
	l = len(m.Root)
	if l > 0 {
		n += 1 + l + sovTransactionReceipt(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTransactionReceipt(uint64(m.Status))
	}
	if m.CumulativeGasUsed != 0 {
		n += 1 + sovTransactionReceipt(uint64(m.CumulativeGasUsed))
	}
	l = len(m.Bloom)
	if l > 0 {
		n += 1 + l + sovTransactionReceipt(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTransactionReceipt(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovTransactionReceipt(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovTransactionReceipt(uint64(m.GasUsed))
	}
	return n
}

func sovTransactionReceipt(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransactionReceipt(x uint64) (n int) {
	return sovTransactionReceipt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TransactionReceipt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionReceipt{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Root:` + fmt.Sprintf("%v", this.Root) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`CumulativeGasUsed:` + fmt.Sprintf("%v", this.CumulativeGasUsed) + `,`,
		`Bloom:` + fmt.Sprintf("%v", this.Bloom) + `,`,
		`TxHash:` + fmt.Sprintf("%v", this.TxHash) + `,`,
		`ContractAddress:` + fmt.Sprintf("%v", this.ContractAddress) + `,`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransactionReceipt(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TransactionReceipt) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransactionReceipt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionReceipt: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionReceipt: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Root", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Root = append(m.Root[:0], dAtA[iNdEx:postIndex]...)
			if m.Root == nil {
				m.Root = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeGasUsed", wireType)
			}
			m.CumulativeGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CumulativeGasUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bloom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransactionReceipt
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bloom = append(m.Bloom[:0], dAtA[iNdEx:postIndex]...)
			if m.Bloom == nil {
				m.Bloom = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransactionReceipt
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransactionReceipt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransactionReceipt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransactionReceipt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransactionReceipt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransactionReceipt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransactionReceipt
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransactionReceipt
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransactionReceipt(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransactionReceipt = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransactionReceipt   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/maichain/eth-indexer/indexer/pb/transaction_receipt.proto", fileDescriptorTransactionReceipt)
}

var fileDescriptorTransactionReceipt = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbb, 0x51, 0xfe, 0xb4, 0xab, 0x42, 0xdb, 0x2d, 0x42, 0x56, 0x25, 0x6c, 0xb3, 0x17,
	0x22, 0xd4, 0x34, 0x08, 0xa8, 0x90, 0x02, 0x07, 0x88, 0x2c, 0x20, 0xe2, 0x82, 0x2c, 0x38, 0x5b,
	0x6b, 0x7b, 0xb1, 0x57, 0xc4, 0x5e, 0xb3, 0xbb, 0xae, 0x12, 0x4e, 0x3c, 0x06, 0x2f, 0xc1, 0x3b,
	0x70, 0xec, 0x91, 0x23, 0x27, 0x8b, 0xa6, 0x37, 0x1f, 0x79, 0x02, 0x94, 0x75, 0x4a, 0xba, 0x55,
	0x4e, 0xf6, 0xcc, 0x37, 0xdf, 0x6f, 0x34, 0x9f, 0x0d, 0xbd, 0x84, 0xa9, 0xb4, 0x0c, 0x4f, 0x22,
	0x9e, 0x0d, 0x33, 0xc2, 0xa2, 0x94, 0xb0, 0x7c, 0x48, 0x55, 0x3a, 0x60, 0x79, 0x4c, 0x67, 0x54,
	0x0c, 0xaf, 0x9e, 0x45, 0x38, 0x54, 0x82, 0xe4, 0x92, 0x44, 0x8a, 0xf1, 0x3c, 0x10, 0x34, 0xa2,
	0xac, 0x50, 0x27, 0x85, 0xe0, 0x8a, 0xa3, 0x56, 0x11, 0x1e, 0x0d, 0xae, 0x91, 0x12, 0x9e, 0xf0,
	0xa1, 0x96, 0xc2, 0xf2, 0x93, 0xae, 0x74, 0xa1, 0xdf, 0x1a, 0x0b, 0xfe, 0xd1, 0x81, 0xe8, 0xc3,
	0x1a, 0xe8, 0x37, 0x3c, 0xe4, 0xc1, 0xd6, 0xc4, 0xb3, 0x80, 0x0b, 0xfa, 0xed, 0xf1, 0xd3, 0xba,
	0x72, 0x76, 0x59, 0x7c, 0xcc, 0x33, 0xa6, 0x68, 0x56, 0xa8, 0xf9, 0xdf, 0xca, 0x71, 0x13, 0x2e,
	0xb2, 0x11, 0x2e, 0x04, 0xcb, 0x88, 0x98, 0x07, 0x9f, 0xe9, 0x1c, 0xbb, 0x31, 0xa5, 0x05, 0xfd,
	0x52, 0x92, 0xe9, 0x08, 0x0f, 0xb0, 0xdf, 0x9a, 0x78, 0xe8, 0x05, 0x6c, 0x0b, 0xce, 0x95, 0xd5,
	0x72, 0x41, 0x7f, 0x77, 0xdc, 0xaf, 0x2b, 0xe7, 0xf6, 0xb2, 0x36, 0x48, 0xa8, 0x21, 0x45, 0x7c,
	0x5a, 0x66, 0xf9, 0x68, 0x29, 0x63, 0x5f, 0xbb, 0x90, 0x07, 0xbb, 0x52, 0x11, 0x55, 0x4a, 0xab,
	0xed, 0x82, 0xfe, 0xad, 0xf1, 0x71, 0x5d, 0x39, 0xfb, 0x4d, 0xc7, 0x20, 0xdc, 0x31, 0x08, 0xcd,
	0x00, 0xf6, 0x57, 0x5e, 0x74, 0x06, 0x0f, 0xa3, 0x32, 0x2b, 0xa7, 0x44, 0xb1, 0x33, 0x1a, 0x24,
	0x44, 0x06, 0xa5, 0xa4, 0xb1, 0xd5, 0xd1, 0xa7, 0xbd, 0xae, 0x2b, 0xe7, 0xde, 0x06, 0xd9, 0xe0,
	0xdf, 0x37, 0xf8, 0x1b, 0xa6, 0xb1, 0x7f, 0xb0, 0xee, 0xbe, 0x21, 0xf2, 0xa3, 0xa4, 0x31, 0x7a,
	0x09, 0x3b, 0xe1, 0x94, 0xf3, 0xcc, 0xea, 0xea, 0xe3, 0x1f, 0xd6, 0x95, 0xb3, 0xa7, 0x1b, 0x06,
	0xfb, 0xd0, 0x60, 0x6b, 0x1d, 0xfb, 0x8d, 0x11, 0xbd, 0x87, 0x3d, 0x35, 0x0b, 0x52, 0x22, 0x53,
	0xab, 0xe7, 0x82, 0xfe, 0xce, 0xf8, 0x59, 0x5d, 0x39, 0x07, 0xab, 0x96, 0x41, 0xb1, 0x0d, 0xca,
	0x6a, 0xe2, 0xb9, 0x64, 0x5f, 0xe9, 0xe8, 0xf1, 0xe9, 0x29, 0xf6, 0xbb, 0x6a, 0xf6, 0x96, 0xc8,
	0x14, 0x29, 0xb8, 0x1f, 0xf1, 0x5c, 0x09, 0x12, 0xa9, 0x80, 0xc4, 0xb1, 0xa0, 0x52, 0x5a, 0xdb,
	0x1a, 0x3d, 0xa9, 0x2b, 0xe7, 0xe8, 0xa6, 0x66, 0xec, 0x78, 0x60, 0xa6, 0x70, 0x63, 0xf4, 0xda,
	0xb2, 0xbd, 0x2b, 0xed, 0x55, 0x23, 0xa1, 0x77, 0x70, 0xfb, 0x7f, 0xec, 0x3b, 0x3a, 0xf6, 0x47,
	0xf5, 0xf2, 0xbb, 0x6f, 0xca, 0xfa, 0xae, 0xb1, 0x65, 0x1d, 0x70, 0x2f, 0x69, 0x62, 0x1d, 0xbb,
	0xe7, 0x17, 0xf6, 0xd6, 0xef, 0x0b, 0x7b, 0xeb, 0xdb, 0xc2, 0x06, 0xe7, 0x0b, 0x1b, 0xfc, 0x5a,
	0xd8, 0xe0, 0xcf, 0xc2, 0x06, 0xdf, 0x2f, 0xed, 0xad, 0x9f, 0x97, 0x36, 0x08, 0xbb, 0xfa, 0xc7,
	0x7e, 0xf2, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x9c, 0xb6, 0xb3, 0x53, 0x03, 0x00, 0x00,
}
