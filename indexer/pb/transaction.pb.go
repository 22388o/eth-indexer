// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/maichain/eth-indexer/indexer/pb/transaction.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Transaction struct {
	ID       uint64 `protobuf:"varint,1,opt,name=ID,proto3" json:"id,omitempty" gorm:"primary_key" deepequal:"-"`
	Hash     string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty" gorm:"column:hash;size:255"`
	From     string `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty" gorm:"column:from;size:255"`
	To       string `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty" gorm:"column:to;size:255"`
	Nonce    []byte `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce,omitempty" gorm:"column:nonce"`
	GasPrice int64  `protobuf:"varint,6,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty" gorm:"column:gas_price"`
	GasLimit uint64 `protobuf:"varint,7,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty" gorm:"column:gas_limit"`
	Amount   int64  `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty" gorm:"column:amount"`
	Payload  []byte `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty" gorm:"column:payload"`
	V        int64  `protobuf:"varint,10,opt,name=v,proto3" json:"v,omitempty" gorm:"column:v"`
	R        int64  `protobuf:"varint,11,opt,name=r,proto3" json:"r,omitempty" gorm:"column:r"`
	S        int64  `protobuf:"varint,12,opt,name=s,proto3" json:"s,omitempty" gorm:"column:s"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptorTransaction, []int{0} }

type TransactionQueryRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *TransactionQueryRequest) Reset()      { *m = TransactionQueryRequest{} }
func (*TransactionQueryRequest) ProtoMessage() {}
func (*TransactionQueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptorTransaction, []int{1}
}

type TransactionQueryResponse struct {
	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *TransactionQueryResponse) Reset()      { *m = TransactionQueryResponse{} }
func (*TransactionQueryResponse) ProtoMessage() {}
func (*TransactionQueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptorTransaction, []int{2}
}

func init() {
	proto.RegisterType((*Transaction)(nil), "pb.Transaction")
	proto.RegisterType((*TransactionQueryRequest)(nil), "pb.TransactionQueryRequest")
	proto.RegisterType((*TransactionQueryResponse)(nil), "pb.TransactionQueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TransactionService service

type TransactionServiceClient interface {
	GetTransactionByHash(ctx context.Context, in *TransactionQueryRequest, opts ...grpc.CallOption) (*TransactionQueryResponse, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactionByHash(ctx context.Context, in *TransactionQueryRequest, opts ...grpc.CallOption) (*TransactionQueryResponse, error) {
	out := new(TransactionQueryResponse)
	err := grpc.Invoke(ctx, "/pb.TransactionService/GetTransactionByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransactionService service

type TransactionServiceServer interface {
	GetTransactionByHash(context.Context, *TransactionQueryRequest) (*TransactionQueryResponse, error)
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TransactionService/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByHash(ctx, req.(*TransactionQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionByHash",
			Handler:    _TransactionService_GetTransactionByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/maichain/eth-indexer/indexer/pb/transaction.proto",
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.ID))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if len(m.From) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.From)))
		i += copy(dAtA[i:], m.From)
	}
	if len(m.To) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.To)))
		i += copy(dAtA[i:], m.To)
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.GasPrice != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.GasLimit))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Amount))
	}
	if len(m.Payload) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Payload)))
		i += copy(dAtA[i:], m.Payload)
	}
	if m.V != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.V))
	}
	if m.R != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.R))
	}
	if m.S != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.S))
	}
	return i, nil
}

func (m *TransactionQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *TransactionQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Transaction != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTransaction(dAtA, i, uint64(m.Transaction.Size()))
		n1, err := m.Transaction.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func encodeVarintTransaction(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Transaction) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovTransaction(uint64(m.ID))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.GasPrice != 0 {
		n += 1 + sovTransaction(uint64(m.GasPrice))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTransaction(uint64(m.GasLimit))
	}
	if m.Amount != 0 {
		n += 1 + sovTransaction(uint64(m.Amount))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovTransaction(uint64(m.V))
	}
	if m.R != 0 {
		n += 1 + sovTransaction(uint64(m.R))
	}
	if m.S != 0 {
		n += 1 + sovTransaction(uint64(m.S))
	}
	return n
}

func (m *TransactionQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func (m *TransactionQueryResponse) Size() (n int) {
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovTransaction(uint64(l))
	}
	return n
}

func sovTransaction(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTransaction(x uint64) (n int) {
	return sovTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Transaction) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Transaction{`,
		`ID:` + fmt.Sprintf("%v", this.ID) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`From:` + fmt.Sprintf("%v", this.From) + `,`,
		`To:` + fmt.Sprintf("%v", this.To) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`GasPrice:` + fmt.Sprintf("%v", this.GasPrice) + `,`,
		`GasLimit:` + fmt.Sprintf("%v", this.GasLimit) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`Payload:` + fmt.Sprintf("%v", this.Payload) + `,`,
		`V:` + fmt.Sprintf("%v", this.V) + `,`,
		`R:` + fmt.Sprintf("%v", this.R) + `,`,
		`S:` + fmt.Sprintf("%v", this.S) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransactionQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionQueryRequest{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TransactionQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TransactionQueryResponse{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "Transaction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTransaction(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			m.R = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.R |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			m.S = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.S |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTransaction
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTransaction
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTransaction
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTransaction(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTransaction = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransaction   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/maichain/eth-indexer/indexer/pb/transaction.proto", fileDescriptorTransaction)
}

var fileDescriptorTransaction = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0xc0, 0xe7, 0x6e, 0xeb, 0x36, 0x77, 0x62, 0x60, 0x86, 0x66, 0x36, 0x94, 0x44, 0x3e, 0xa0,
	0x0a, 0xad, 0x2d, 0x2b, 0xec, 0x52, 0x40, 0x82, 0xaa, 0x88, 0x4d, 0x02, 0xc1, 0x02, 0xf7, 0x29,
	0x6d, 0xbd, 0x34, 0xa2, 0x89, 0x33, 0xdb, 0xa9, 0x28, 0x27, 0x1e, 0x83, 0x67, 0xe0, 0x29, 0x38,
	0xee, 0xc8, 0x91, 0x53, 0xc4, 0xba, 0x5b, 0x8e, 0x3c, 0x01, 0xb2, 0xd3, 0xae, 0x31, 0x43, 0xe3,
	0x14, 0x7f, 0x7f, 0x7e, 0x3f, 0xd9, 0xc9, 0xe7, 0xc0, 0xa7, 0x7e, 0x20, 0x07, 0x49, 0xb7, 0xde,
	0x63, 0x61, 0x23, 0xf4, 0x82, 0xde, 0xc0, 0x0b, 0xa2, 0x06, 0x95, 0x83, 0x5a, 0x10, 0xf5, 0xe9,
	0x27, 0xca, 0x1b, 0xb3, 0x67, 0xdc, 0x6d, 0x48, 0xee, 0x45, 0xc2, 0xeb, 0xc9, 0x80, 0x45, 0xf5,
	0x98, 0x33, 0xc9, 0x50, 0x29, 0xee, 0x6e, 0xd7, 0x0a, 0x06, 0x9f, 0xf9, 0xac, 0xa1, 0x4b, 0xdd,
	0xe4, 0x44, 0x47, 0x3a, 0xd0, 0xab, 0x1c, 0x21, 0xdf, 0xca, 0xb0, 0xf2, 0x61, 0x2e, 0x42, 0x1d,
	0x58, 0x3a, 0xec, 0x60, 0xe0, 0x80, 0xea, 0x52, 0xfb, 0x71, 0x96, 0xda, 0xeb, 0x41, 0x7f, 0x97,
	0x85, 0x81, 0xa4, 0x61, 0x2c, 0xc7, 0xbf, 0x53, 0xdb, 0xf1, 0x19, 0x0f, 0x5b, 0x24, 0xe6, 0x41,
	0xe8, 0xf1, 0xf1, 0xf1, 0x47, 0x3a, 0x26, 0x4e, 0x9f, 0xd2, 0x98, 0x9e, 0x26, 0xde, 0xb0, 0x45,
	0x6a, 0xc4, 0x2d, 0x1d, 0x76, 0xd0, 0x4b, 0xb8, 0x34, 0xf0, 0xc4, 0x00, 0x97, 0x1c, 0x50, 0x5d,
	0x6b, 0xef, 0x65, 0xa9, 0x7d, 0x43, 0xc5, 0x86, 0x69, 0x27, 0x37, 0xf5, 0xd8, 0x30, 0x09, 0xa3,
	0x96, 0x2a, 0x3f, 0x11, 0xc1, 0x67, 0xda, 0x6a, 0xee, 0xef, 0x13, 0x57, 0xe3, 0x4a, 0x73, 0xc2,
	0x59, 0x88, 0x17, 0xe7, 0x1a, 0x15, 0x5f, 0xa3, 0x51, 0xe5, 0xa2, 0x46, 0xc5, 0xe8, 0x19, 0x2c,
	0x49, 0x86, 0x97, 0xb4, 0xa4, 0xa6, 0xce, 0x24, 0x99, 0xa1, 0xb8, 0x6b, 0x28, 0x24, 0x2b, 0x08,
	0x4a, 0x92, 0xa1, 0xe7, 0x70, 0x39, 0x62, 0x51, 0x8f, 0xe2, 0x65, 0x07, 0x54, 0xd7, 0xdb, 0x0f,
	0xb2, 0xd4, 0xde, 0xd0, 0x09, 0x43, 0x72, 0xdb, 0x90, 0xe8, 0x3a, 0x71, 0x73, 0x10, 0xbd, 0x85,
	0x6b, 0xbe, 0x27, 0x8e, 0x63, 0x1e, 0xf4, 0x28, 0x2e, 0x3b, 0xa0, 0xba, 0xd8, 0x6e, 0x66, 0x0a,
	0x99, 0x25, 0x0d, 0xd3, 0x96, 0x61, 0xba, 0xec, 0x21, 0xee, 0xaa, 0xef, 0x89, 0x77, 0x6a, 0x39,
	0x13, 0x0e, 0x83, 0x30, 0x90, 0x78, 0x45, 0x7f, 0xac, 0x4b, 0xa1, 0x4e, 0xfe, 0x47, 0xa8, 0x7b,
	0x72, 0xe1, 0x6b, 0xb5, 0x44, 0x1d, 0x58, 0xf6, 0x42, 0x96, 0x44, 0x12, 0xaf, 0xea, 0xed, 0xed,
	0x66, 0xa9, 0x7d, 0x33, 0xcf, 0x18, 0xaa, 0x4d, 0x43, 0x95, 0x37, 0x10, 0x77, 0xca, 0xa2, 0x03,
	0xb8, 0x12, 0x7b, 0xe3, 0x21, 0xf3, 0xfa, 0x78, 0x4d, 0xbf, 0xab, 0x7a, 0x96, 0xda, 0xb7, 0xa6,
	0x29, 0xc3, 0x73, 0xc7, 0xf0, 0x4c, 0x3b, 0x88, 0x3b, 0xc3, 0xd1, 0x43, 0x08, 0x46, 0x18, 0xea,
	0xad, 0x90, 0x2c, 0xb5, 0x2b, 0x23, 0x83, 0xde, 0x30, 0xe8, 0x11, 0x71, 0xc1, 0x48, 0x11, 0x1c,
	0x57, 0xe6, 0x04, 0xbf, 0x86, 0xe0, 0xc4, 0x05, 0x5c, 0x11, 0x02, 0xaf, 0xcf, 0x09, 0x71, 0x0d,
	0x21, 0x88, 0x0b, 0x04, 0x79, 0x01, 0xb7, 0x0a, 0x77, 0xe5, 0x28, 0xa1, 0x7c, 0xec, 0xd2, 0xd3,
	0x84, 0x0a, 0x89, 0xee, 0x4f, 0x27, 0x1e, 0xe8, 0x29, 0x43, 0x57, 0x27, 0x3e, 0x1f, 0x69, 0xf2,
	0x06, 0xe2, 0xab, 0x0a, 0x11, 0xb3, 0x48, 0x50, 0xb4, 0x07, 0x2b, 0x85, 0x3b, 0xad, 0x55, 0x95,
	0xe6, 0x46, 0x3d, 0xee, 0xd6, 0x0b, 0x88, 0x5b, 0xec, 0x69, 0xfa, 0x10, 0x15, 0x6a, 0xef, 0x29,
	0x1f, 0xa9, 0xf1, 0x38, 0x82, 0x9b, 0xaf, 0xa8, 0x2c, 0x14, 0xda, 0xe3, 0x03, 0x75, 0x9f, 0x76,
	0xfe, 0x72, 0x15, 0x4f, 0xb0, 0x7d, 0xef, 0xdf, 0xc5, 0x7c, 0x6f, 0x6d, 0xe7, 0xec, 0xdc, 0x5a,
	0xf8, 0x79, 0x6e, 0x2d, 0x7c, 0x99, 0x58, 0xe0, 0x6c, 0x62, 0x81, 0x1f, 0x13, 0x0b, 0xfc, 0x9a,
	0x58, 0xe0, 0xeb, 0x85, 0xb5, 0xf0, 0xfd, 0xc2, 0x02, 0xdd, 0xb2, 0xfe, 0xa1, 0x3c, 0xfa, 0x13,
	0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x34, 0x2f, 0xc3, 0x04, 0x00, 0x00,
}
