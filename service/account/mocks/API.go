// Code generated by mockery v1.0.0
package mocks

import big "math/big"
import common "github.com/ethereum/go-ethereum/common"
import context "context"
import mock "github.com/stretchr/testify/mock"

// API is an autogenerated mock type for the API type
type API struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: ctx, address, blockNr
func (_m *API) GetBalance(ctx context.Context, address common.Address, blockNr int64) (*big.Int, *big.Int, error) {
	ret := _m.Called(ctx, address, blockNr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, int64) *big.Int); ok {
		r0 = rf(ctx, address, blockNr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 *big.Int
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, int64) *big.Int); ok {
		r1 = rf(ctx, address, blockNr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, common.Address, int64) error); ok {
		r2 = rf(ctx, address, blockNr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetERC20Balance provides a mock function with given fields: ctx, contractAddress, address, blockNr
func (_m *API) GetERC20Balance(ctx context.Context, contractAddress common.Address, address common.Address, blockNr int64) (*big.Int, *big.Int, error) {
	ret := _m.Called(ctx, contractAddress, address, blockNr)

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func(context.Context, common.Address, common.Address, int64) *big.Int); ok {
		r0 = rf(ctx, contractAddress, address, blockNr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	var r1 *big.Int
	if rf, ok := ret.Get(1).(func(context.Context, common.Address, common.Address, int64) *big.Int); ok {
		r1 = rf(ctx, contractAddress, address, blockNr)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*big.Int)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, common.Address, common.Address, int64) error); ok {
		r2 = rf(ctx, contractAddress, address, blockNr)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
