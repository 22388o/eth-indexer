// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/maichain/eth-indexer/service/pb/block.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		github.com/maichain/eth-indexer/service/pb/block.proto
		github.com/maichain/eth-indexer/service/pb/block_header.proto
		github.com/maichain/eth-indexer/service/pb/transaction.proto
		github.com/maichain/eth-indexer/service/pb/transaction_receipt.proto

	It has these top-level messages:
		BlockQueryRequest
		BlockQueryResponse
		BlockHeader
		Transaction
		TransactionQueryRequest
		TransactionQueryResponse
		TransactionReceipt
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BlockQueryRequest struct {
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockQueryRequest) Reset()                    { *m = BlockQueryRequest{} }
func (*BlockQueryRequest) ProtoMessage()               {}
func (*BlockQueryRequest) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{0} }

type BlockQueryResponse struct {
	Hash         string                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Number       int64                 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Nonce        []byte                `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Transactions []*Transaction        `protobuf:"bytes,4,rep,name=transactions" json:"transactions,omitempty"`
	Receipts     []*TransactionReceipt `protobuf:"bytes,5,rep,name=receipts" json:"receipts,omitempty"`
}

func (m *BlockQueryResponse) Reset()                    { *m = BlockQueryResponse{} }
func (*BlockQueryResponse) ProtoMessage()               {}
func (*BlockQueryResponse) Descriptor() ([]byte, []int) { return fileDescriptorBlock, []int{1} }

func init() {
	proto.RegisterType((*BlockQueryRequest)(nil), "pb.BlockQueryRequest")
	proto.RegisterType((*BlockQueryResponse)(nil), "pb.BlockQueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BlockService service

type BlockServiceClient interface {
	GetBlockByHash(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*BlockQueryResponse, error)
}

type blockServiceClient struct {
	cc *grpc.ClientConn
}

func NewBlockServiceClient(cc *grpc.ClientConn) BlockServiceClient {
	return &blockServiceClient{cc}
}

func (c *blockServiceClient) GetBlockByHash(ctx context.Context, in *BlockQueryRequest, opts ...grpc.CallOption) (*BlockQueryResponse, error) {
	out := new(BlockQueryResponse)
	err := grpc.Invoke(ctx, "/pb.BlockService/GetBlockByHash", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BlockService service

type BlockServiceServer interface {
	GetBlockByHash(context.Context, *BlockQueryRequest) (*BlockQueryResponse, error)
}

func RegisterBlockServiceServer(s *grpc.Server, srv BlockServiceServer) {
	s.RegisterService(&_BlockService_serviceDesc, srv)
}

func _BlockService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.BlockService/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockServiceServer).GetBlockByHash(ctx, req.(*BlockQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.BlockService",
	HandlerType: (*BlockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockByHash",
			Handler:    _BlockService_GetBlockByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/maichain/eth-indexer/service/pb/block.proto",
}

func (m *BlockQueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockQueryRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *BlockQueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockQueryResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Number != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBlock(dAtA, i, uint64(m.Number))
	}
	if len(m.Nonce) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBlock(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if len(m.Transactions) > 0 {
		for _, msg := range m.Transactions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Receipts) > 0 {
		for _, msg := range m.Receipts {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintBlock(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintBlock(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *BlockQueryRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	return n
}

func (m *BlockQueryResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovBlock(uint64(m.Number))
	}
	l = len(m.Nonce)
	if l > 0 {
		n += 1 + l + sovBlock(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	if len(m.Receipts) > 0 {
		for _, e := range m.Receipts {
			l = e.Size()
			n += 1 + l + sovBlock(uint64(l))
		}
	}
	return n
}

func sovBlock(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBlock(x uint64) (n int) {
	return sovBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BlockQueryRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockQueryRequest{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockQueryResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockQueryResponse{`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Transactions:` + strings.Replace(fmt.Sprintf("%v", this.Transactions), "Transaction", "Transaction", 1) + `,`,
		`Receipts:` + strings.Replace(fmt.Sprintf("%v", this.Receipts), "TransactionReceipt", "TransactionReceipt", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BlockQueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockQueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &Transaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlock
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receipts = append(m.Receipts, &TransactionReceipt{})
			if err := m.Receipts[len(m.Receipts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBlock
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBlock
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBlock(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBlock = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlock   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/maichain/eth-indexer/service/pb/block.proto", fileDescriptorBlock)
}

var fileDescriptorBlock = []byte{
	// 396 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xb1, 0xae, 0xd3, 0x30,
	0x18, 0x85, 0xeb, 0xf6, 0xde, 0x2b, 0x30, 0x55, 0x0b, 0x06, 0xa2, 0x28, 0x83, 0x13, 0x75, 0x40,
	0x41, 0x6a, 0x13, 0xa9, 0x48, 0x2c, 0x20, 0x21, 0x59, 0x48, 0x20, 0x96, 0x8a, 0xc2, 0x8e, 0xe2,
	0x60, 0x1a, 0x0b, 0x62, 0x87, 0xd8, 0x41, 0x74, 0xe3, 0x31, 0x78, 0x0e, 0x9e, 0x80, 0xb1, 0x23,
	0x23, 0x53, 0x44, 0xd3, 0x2d, 0x4f, 0x81, 0xe2, 0x14, 0x30, 0x65, 0x01, 0xb6, 0xfc, 0xe7, 0x3f,
	0xe7, 0x8b, 0x7c, 0x7e, 0x78, 0x77, 0xc3, 0x75, 0x56, 0xd1, 0x28, 0x95, 0x79, 0x9c, 0x27, 0x3c,
	0xcd, 0x12, 0x2e, 0x62, 0xa6, 0xb3, 0x05, 0x17, 0x2f, 0xd9, 0x7b, 0x56, 0xc6, 0x8a, 0x95, 0xef,
	0x78, 0xca, 0xe2, 0x82, 0xc6, 0xf4, 0x8d, 0x4c, 0x5f, 0x47, 0x45, 0x29, 0xb5, 0x44, 0xc3, 0x82,
	0x7a, 0x0b, 0x2b, 0xbb, 0x91, 0x1b, 0x19, 0x9b, 0x15, 0xad, 0x5e, 0x99, 0xc9, 0x0c, 0xe6, 0xab,
	0x8f, 0x78, 0xf7, 0xff, 0xe1, 0x57, 0xba, 0x4c, 0x84, 0x4a, 0x52, 0xcd, 0xa5, 0x38, 0xa6, 0x1f,
	0xfe, 0x5f, 0xfa, 0x45, 0xc9, 0x52, 0xc6, 0x0b, 0xdd, 0x53, 0x66, 0xf7, 0xe0, 0x35, 0xd2, 0xbd,
	0xe2, 0x69, 0xc5, 0xca, 0xed, 0x9a, 0xbd, 0xad, 0x98, 0xd2, 0xe8, 0x16, 0x3c, 0xcb, 0x12, 0x95,
	0xb9, 0x20, 0x00, 0xe1, 0x65, 0x82, 0xda, 0xda, 0x9f, 0x74, 0xf3, 0x5c, 0xe6, 0x5c, 0xb3, 0xbc,
	0xd0, 0xdb, 0xb5, 0xd9, 0xcf, 0x3e, 0x0d, 0x21, 0xb2, 0xd3, 0xaa, 0x90, 0x42, 0xb1, 0xbf, 0x8d,
	0xa3, 0x39, 0xbc, 0x10, 0x55, 0x4e, 0x59, 0xe9, 0x0e, 0x03, 0x10, 0x8e, 0xc8, 0x8d, 0xb6, 0xf6,
	0xaf, 0xf6, 0x8a, 0xe5, 0x3d, 0x7a, 0xd0, 0x6d, 0x78, 0x2e, 0xa4, 0x48, 0x99, 0x3b, 0x0a, 0x40,
	0x38, 0x26, 0xd7, 0xdb, 0xda, 0x9f, 0x1a, 0xc1, 0xf2, 0xf6, 0x0e, 0xb4, 0x82, 0x63, 0xeb, 0xc5,
	0xca, 0x3d, 0x0b, 0x46, 0xe1, 0x95, 0xe5, 0x34, 0x2a, 0x68, 0xf4, 0xfc, 0x97, 0x4e, 0xbc, 0xb6,
	0xf6, 0x1d, 0xdb, 0x68, 0x91, 0x7e, 0x03, 0xa0, 0x27, 0xf0, 0xd2, 0xb1, 0x36, 0xe5, 0x9e, 0x1b,
	0x98, 0x73, 0x02, 0x5b, 0xf7, 0x6b, 0xe2, 0xb4, 0xb5, 0x8f, 0x7e, 0x78, 0x2d, 0xde, 0xcf, 0xfc,
	0x72, 0x05, 0xc7, 0xa6, 0xb3, 0x67, 0xfd, 0x79, 0xd0, 0x03, 0x38, 0x79, 0xc4, 0xb4, 0x91, 0xc8,
	0xf6, 0x71, 0xd7, 0xcb, 0xcd, 0x8e, 0xfd, 0xc7, 0x55, 0x3c, 0xe7, 0x54, 0xee, 0xeb, 0x26, 0xc1,
	0x6e, 0x8f, 0x07, 0x5f, 0xf7, 0x78, 0xf0, 0xa1, 0xc1, 0x60, 0xd7, 0x60, 0xf0, 0xa5, 0xc1, 0xe0,
	0x5b, 0x83, 0xc1, 0xc7, 0x03, 0x1e, 0x7c, 0x3e, 0x60, 0x40, 0x2f, 0xcc, 0xad, 0xef, 0x7c, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0x76, 0xa2, 0x19, 0x7b, 0xdc, 0x02, 0x00, 0x00,
}
