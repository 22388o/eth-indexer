// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/getamis/eth-indexer/service/pb/erc20.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/gogoproto"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AddERC20Request struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber int64  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *AddERC20Request) Reset()                    { *m = AddERC20Request{} }
func (*AddERC20Request) ProtoMessage()               {}
func (*AddERC20Request) Descriptor() ([]byte, []int) { return fileDescriptorErc20, []int{0} }

type AddERC20Response struct {
	Address     string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockNumber int64  `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	TotalSupply string `protobuf:"bytes,3,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`
	Decimals    int64  `protobuf:"varint,4,opt,name=decimals,proto3" json:"decimals,omitempty"`
	Name        string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *AddERC20Response) Reset()                    { *m = AddERC20Response{} }
func (*AddERC20Response) ProtoMessage()               {}
func (*AddERC20Response) Descriptor() ([]byte, []int) { return fileDescriptorErc20, []int{1} }

func init() {
	proto.RegisterType((*AddERC20Request)(nil), "pb.AddERC20Request")
	proto.RegisterType((*AddERC20Response)(nil), "pb.AddERC20Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ERC20Service service

type ERC20ServiceClient interface {
	AddERC20(ctx context.Context, in *AddERC20Request, opts ...grpc.CallOption) (*AddERC20Response, error)
}

type eRC20ServiceClient struct {
	cc *grpc.ClientConn
}

func NewERC20ServiceClient(cc *grpc.ClientConn) ERC20ServiceClient {
	return &eRC20ServiceClient{cc}
}

func (c *eRC20ServiceClient) AddERC20(ctx context.Context, in *AddERC20Request, opts ...grpc.CallOption) (*AddERC20Response, error) {
	out := new(AddERC20Response)
	err := grpc.Invoke(ctx, "/pb.ERC20Service/AddERC20", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ERC20Service service

type ERC20ServiceServer interface {
	AddERC20(context.Context, *AddERC20Request) (*AddERC20Response, error)
}

func RegisterERC20ServiceServer(s *grpc.Server, srv ERC20ServiceServer) {
	s.RegisterService(&_ERC20Service_serviceDesc, srv)
}

func _ERC20Service_AddERC20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddERC20Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ERC20ServiceServer).AddERC20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ERC20Service/AddERC20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ERC20ServiceServer).AddERC20(ctx, req.(*AddERC20Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ERC20Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ERC20Service",
	HandlerType: (*ERC20ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddERC20",
			Handler:    _ERC20Service_AddERC20_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/getamis/eth-indexer/service/pb/erc20.proto",
}

func (m *AddERC20Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddERC20Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErc20(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.BlockNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErc20(dAtA, i, uint64(m.BlockNumber))
	}
	return i, nil
}

func (m *AddERC20Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddERC20Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErc20(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.BlockNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErc20(dAtA, i, uint64(m.BlockNumber))
	}
	if len(m.TotalSupply) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErc20(dAtA, i, uint64(len(m.TotalSupply)))
		i += copy(dAtA[i:], m.TotalSupply)
	}
	if m.Decimals != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintErc20(dAtA, i, uint64(m.Decimals))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErc20(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func encodeVarintErc20(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *AddERC20Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovErc20(uint64(m.BlockNumber))
	}
	return n
}

func (m *AddERC20Response) Size() (n int) {
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovErc20(uint64(m.BlockNumber))
	}
	l = len(m.TotalSupply)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovErc20(uint64(m.Decimals))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovErc20(uint64(l))
	}
	return n
}

func sovErc20(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErc20(x uint64) (n int) {
	return sovErc20(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *AddERC20Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddERC20Request{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`BlockNumber:` + fmt.Sprintf("%v", this.BlockNumber) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddERC20Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddERC20Response{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`BlockNumber:` + fmt.Sprintf("%v", this.BlockNumber) + `,`,
		`TotalSupply:` + fmt.Sprintf("%v", this.TotalSupply) + `,`,
		`Decimals:` + fmt.Sprintf("%v", this.Decimals) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringErc20(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *AddERC20Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErc20
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddERC20Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddERC20Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErc20(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErc20
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddERC20Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErc20
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddERC20Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddERC20Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalSupply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalSupply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc20
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErc20(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErc20
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErc20(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErc20
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc20
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthErc20
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErc20
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErc20(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErc20 = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErc20   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/getamis/eth-indexer/service/pb/erc20.proto", fileDescriptorErc20)
}

var fileDescriptorErc20 = []byte{
	// 356 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xbd, 0x6e, 0xdb, 0x30,
	0x14, 0x85, 0x4d, 0xdb, 0x6d, 0x6d, 0xda, 0x68, 0x0b, 0xd6, 0x83, 0x20, 0x14, 0x84, 0xab, 0xc9,
	0x28, 0x60, 0xd1, 0x75, 0x81, 0x0e, 0xdd, 0xda, 0xa2, 0x53, 0x01, 0x0f, 0xf2, 0xd8, 0xc1, 0x20,
	0x25, 0x46, 0x26, 0x22, 0x91, 0x8c, 0x48, 0x19, 0xc9, 0x16, 0xe4, 0x15, 0xb2, 0x64, 0xce, 0x93,
	0x64, 0xf4, 0x18, 0x20, 0x4b, 0xc6, 0x58, 0xce, 0x83, 0x04, 0xa1, 0xe0, 0xfc, 0xad, 0xd9, 0xee,
	0xf9, 0x70, 0x78, 0x70, 0x79, 0x2e, 0xfc, 0x91, 0x0a, 0xbb, 0x2c, 0x59, 0x18, 0xab, 0x9c, 0xe4,
	0x54, 0xc4, 0x4b, 0x2a, 0x24, 0xe1, 0x76, 0x39, 0x16, 0x32, 0xe1, 0x87, 0xbc, 0x20, 0x86, 0x17,
	0x2b, 0x11, 0x73, 0xa2, 0x19, 0xe1, 0x45, 0x3c, 0x9d, 0x84, 0xba, 0x50, 0x56, 0xa1, 0xa6, 0x66,
	0xfe, 0xe7, 0x54, 0xa9, 0x34, 0xe3, 0x84, 0x6a, 0x41, 0xa8, 0x94, 0xca, 0x52, 0x2b, 0x94, 0x34,
	0xb5, 0xc3, 0x1f, 0x3f, 0x49, 0x4e, 0x55, 0xaa, 0x88, 0xc3, 0xac, 0xdc, 0x73, 0xca, 0x09, 0x37,
	0xd5, 0xf6, 0x60, 0x06, 0x3f, 0xfc, 0x4a, 0x92, 0xbf, 0xd1, 0x9f, 0xe9, 0x24, 0xe2, 0x07, 0x25,
	0x37, 0x16, 0x79, 0xf0, 0x1d, 0x4d, 0x92, 0x82, 0x1b, 0xe3, 0x81, 0x21, 0x18, 0x75, 0xa3, 0x9d,
	0x44, 0x5f, 0x60, 0x9f, 0x65, 0x2a, 0xde, 0x5f, 0xc8, 0x32, 0x67, 0xbc, 0xf0, 0x9a, 0x43, 0x30,
	0x6a, 0x45, 0x3d, 0xc7, 0x66, 0x0e, 0x05, 0xe7, 0x00, 0x7e, 0x7c, 0x0c, 0x34, 0x5a, 0x49, 0xc3,
	0x5f, 0x95, 0x78, 0x6f, 0xb1, 0xca, 0xd2, 0x6c, 0x61, 0x4a, 0xad, 0xb3, 0x23, 0xaf, 0xe5, 0x12,
	0x7a, 0x8e, 0xcd, 0x1d, 0x42, 0x3e, 0xec, 0x24, 0x3c, 0x16, 0x39, 0xcd, 0x8c, 0xd7, 0x76, 0x09,
	0x0f, 0x1a, 0x21, 0xd8, 0x96, 0x34, 0xe7, 0xde, 0x1b, 0xf7, 0xcc, 0xcd, 0xd3, 0xff, 0xb0, 0xef,
	0x16, 0x9c, 0xd7, 0x25, 0xa3, 0x7f, 0xb0, 0xb3, 0xdb, 0x19, 0x7d, 0x0a, 0x35, 0x0b, 0x5f, 0x54,
	0xe2, 0x0f, 0x9e, 0xc3, 0xfa, 0x5b, 0xc1, 0xe0, 0xe4, 0xea, 0xf6, 0xb4, 0xf9, 0x3e, 0xe8, 0x92,
	0xd5, 0xb7, 0xfa, 0x4a, 0x3f, 0xc1, 0xd7, 0xdf, 0xc3, 0xf5, 0x06, 0x37, 0xae, 0x37, 0xb8, 0x71,
	0x5c, 0x61, 0xb0, 0xae, 0x30, 0xb8, 0xac, 0x30, 0xb8, 0xa9, 0x30, 0x38, 0xdb, 0xe2, 0xc6, 0xc5,
	0x16, 0x03, 0xf6, 0xd6, 0x55, 0xff, 0xfd, 0x2e, 0x00, 0x00, 0xff, 0xff, 0x76, 0x98, 0x18, 0x3d,
	0x05, 0x02, 0x00, 0x00,
}
