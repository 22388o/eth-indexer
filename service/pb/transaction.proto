syntax = "proto3";

package pb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.goproto_registration) = true;

message Transaction {
  uint64 ID = 1
  [
    (gogoproto.jsontag) = "id,omitempty",
    (gogoproto.moretags) = "gorm:\"primary_key\" deepequal:\"-\""
  ];

  string hash = 2
  [
    (gogoproto.jsontag) = "hash,omitempty",
    (gogoproto.moretags) = "gorm:\"column:hash;size:255\""
  ];

  string from = 3
  [
    (gogoproto.jsontag) = "from,omitempty",
    (gogoproto.moretags) = "gorm:\"column:from;size:255\""
  ];

  string to = 4
  [
    (gogoproto.jsontag) = "to,omitempty",
    (gogoproto.moretags) = "gorm:\"column:to;size:255\""
  ];

  bytes nonce = 5
  [
    (gogoproto.jsontag) = "nonce,omitempty",
    (gogoproto.moretags) = "gorm:\"column:nonce\""
  ];

  int64 gas_price = 6
  [
    (gogoproto.jsontag) = "gas_price,omitempty",
    (gogoproto.moretags) = "gorm:\"column:gas_price\""
  ];

  uint64 gas_limit = 7
  [
    (gogoproto.jsontag) = "gas_limit,omitempty",
    (gogoproto.moretags) = "gorm:\"column:gas_limit\""
  ];

  int64 amount = 8
  [
    (gogoproto.jsontag) = "amount,omitempty",
    (gogoproto.moretags) = "gorm:\"column:amount\""
  ];

  bytes payload = 9
  [
    (gogoproto.jsontag) = "payload,omitempty",
    (gogoproto.moretags) = "gorm:\"column:payload\""
  ];

  int64 v = 10
  [
    (gogoproto.jsontag) = "v,omitempty",
    (gogoproto.moretags) = "gorm:\"column:v\""
  ];

  int64 r = 11
  [
    (gogoproto.jsontag) = "r,omitempty",
    (gogoproto.moretags) = "gorm:\"column:r\""
  ];

  int64 s = 12
  [
    (gogoproto.jsontag) = "s,omitempty",
    (gogoproto.moretags) = "gorm:\"column:s\""
  ];
}

message TransactionQueryRequest {
  string hash = 1
  [
    (gogoproto.jsontag) = "hash,omitempty"
  ];
}

message TransactionQueryResponse {
  string hash = 1
  [
    (gogoproto.jsontag) = "hash,omitempty"
  ];

  string from = 2
  [
    (gogoproto.jsontag) = "from,omitempty"
  ];

  string to = 3
  [
    (gogoproto.jsontag) = "to,omitempty"
  ];

  bytes nonce = 4
  [
    (gogoproto.jsontag) = "nonce,omitempty"
  ];

  int64 gas_price = 5
  [
    (gogoproto.jsontag) = "gas_price,omitempty"
  ];

  uint64 gas_limit = 6
  [
    (gogoproto.jsontag) = "gas_limit,omitempty"
  ];

  int64 amount = 7
  [
    (gogoproto.jsontag) = "amount,omitempty"
  ];

  bytes payload = 8
  [
    (gogoproto.jsontag) = "payload,omitempty"
  ];
}

service TransactionService {
  rpc GetTransactionByHash(TransactionQueryRequest) returns (TransactionQueryResponse);
}
