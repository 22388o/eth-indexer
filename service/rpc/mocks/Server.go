// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import pb "github.com/getamis/eth-indexer/service/pb"

// Server is an autogenerated mock type for the Server type
type Server struct {
	mock.Mock
}

// GetBalance provides a mock function with given fields: _a0, _a1
func (_m *Server) GetBalance(_a0 context.Context, _a1 *pb.GetBalanceRequest) (*pb.GetBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetBalanceRequest) *pb.GetBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHash provides a mock function with given fields: _a0, _a1
func (_m *Server) GetBlockByHash(_a0 context.Context, _a1 *pb.BlockHashQueryRequest) (*pb.BlockQueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BlockQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BlockHashQueryRequest) *pb.BlockQueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BlockQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BlockHashQueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByNumber provides a mock function with given fields: _a0, _a1
func (_m *Server) GetBlockByNumber(_a0 context.Context, _a1 *pb.BlockNumberQueryRequest) (*pb.BlockQueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.BlockQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.BlockNumberQueryRequest) *pb.BlockQueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.BlockQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.BlockNumberQueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffsetBalance provides a mock function with given fields: _a0, _a1
func (_m *Server) GetOffsetBalance(_a0 context.Context, _a1 *pb.GetOffsetBalanceRequest) (*pb.GetBalanceResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.GetBalanceResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetOffsetBalanceRequest) *pb.GetBalanceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetBalanceResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetOffsetBalanceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByHash provides a mock function with given fields: _a0, _a1
func (_m *Server) GetTransactionByHash(_a0 context.Context, _a1 *pb.TransactionQueryRequest) (*pb.TransactionQueryResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.TransactionQueryResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pb.TransactionQueryRequest) *pb.TransactionQueryResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.TransactionQueryResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pb.TransactionQueryRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
