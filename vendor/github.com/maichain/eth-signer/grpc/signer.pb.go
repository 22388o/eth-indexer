// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/maichain/eth-signer/grpc/signer.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	github.com/maichain/eth-signer/grpc/signer.proto

It has these top-level messages:
	TransactionOption
	SignTxRequest
	SignTxResponse
	NewAccountResponse
	EmptyRequest
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TransactionOption struct {
	ToAddress string `protobuf:"bytes,1,opt,name=to_address,json=toAddress" json:"to_address,omitempty"`
	Amount    uint64 `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
	GasLimit  uint64 `protobuf:"varint,3,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
	GasPrice  uint64 `protobuf:"varint,4,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	Data      []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *TransactionOption) Reset()                    { *m = TransactionOption{} }
func (m *TransactionOption) String() string            { return proto.CompactTextString(m) }
func (*TransactionOption) ProtoMessage()               {}
func (*TransactionOption) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TransactionOption) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *TransactionOption) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *TransactionOption) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *TransactionOption) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TransactionOption) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type SignTxRequest struct {
	Address           string             `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	TransactionOption *TransactionOption `protobuf:"bytes,2,opt,name=transaction_option,json=transactionOption" json:"transaction_option,omitempty"`
}

func (m *SignTxRequest) Reset()                    { *m = SignTxRequest{} }
func (m *SignTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTxRequest) ProtoMessage()               {}
func (*SignTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SignTxRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *SignTxRequest) GetTransactionOption() *TransactionOption {
	if m != nil {
		return m.TransactionOption
	}
	return nil
}

type SignTxResponse struct {
	// SignedTransaction is a RLP-encoded payload of signed transaction
	SignedTransaction []byte `protobuf:"bytes,1,opt,name=signed_transaction,json=signedTransaction,proto3" json:"signed_transaction,omitempty"`
}

func (m *SignTxResponse) Reset()                    { *m = SignTxResponse{} }
func (m *SignTxResponse) String() string            { return proto.CompactTextString(m) }
func (*SignTxResponse) ProtoMessage()               {}
func (*SignTxResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SignTxResponse) GetSignedTransaction() []byte {
	if m != nil {
		return m.SignedTransaction
	}
	return nil
}

type NewAccountResponse struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// PrivateKey is encrypted string
	PrivateKey string `protobuf:"bytes,2,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
}

func (m *NewAccountResponse) Reset()                    { *m = NewAccountResponse{} }
func (m *NewAccountResponse) String() string            { return proto.CompactTextString(m) }
func (*NewAccountResponse) ProtoMessage()               {}
func (*NewAccountResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewAccountResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NewAccountResponse) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

type EmptyRequest struct {
}

func (m *EmptyRequest) Reset()                    { *m = EmptyRequest{} }
func (m *EmptyRequest) String() string            { return proto.CompactTextString(m) }
func (*EmptyRequest) ProtoMessage()               {}
func (*EmptyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*TransactionOption)(nil), "grpc.TransactionOption")
	proto.RegisterType((*SignTxRequest)(nil), "grpc.SignTxRequest")
	proto.RegisterType((*SignTxResponse)(nil), "grpc.SignTxResponse")
	proto.RegisterType((*NewAccountResponse)(nil), "grpc.NewAccountResponse")
	proto.RegisterType((*EmptyRequest)(nil), "grpc.EmptyRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for SignerService service

type SignerServiceClient interface {
	SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc1.CallOption) (*SignTxResponse, error)
	NewAccount(ctx context.Context, in *EmptyRequest, opts ...grpc1.CallOption) (*NewAccountResponse, error)
}

type signerServiceClient struct {
	cc *grpc1.ClientConn
}

func NewSignerServiceClient(cc *grpc1.ClientConn) SignerServiceClient {
	return &signerServiceClient{cc}
}

func (c *signerServiceClient) SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc1.CallOption) (*SignTxResponse, error) {
	out := new(SignTxResponse)
	err := grpc1.Invoke(ctx, "/grpc.SignerService/SignTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signerServiceClient) NewAccount(ctx context.Context, in *EmptyRequest, opts ...grpc1.CallOption) (*NewAccountResponse, error) {
	out := new(NewAccountResponse)
	err := grpc1.Invoke(ctx, "/grpc.SignerService/NewAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SignerService service

type SignerServiceServer interface {
	SignTx(context.Context, *SignTxRequest) (*SignTxResponse, error)
	NewAccount(context.Context, *EmptyRequest) (*NewAccountResponse, error)
}

func RegisterSignerServiceServer(s *grpc1.Server, srv SignerServiceServer) {
	s.RegisterService(&_SignerService_serviceDesc, srv)
}

func _SignerService_SignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).SignTx(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SignerService/SignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).SignTx(ctx, req.(*SignTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignerService_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignerServiceServer).NewAccount(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SignerService/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignerServiceServer).NewAccount(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SignerService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.SignerService",
	HandlerType: (*SignerServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "SignTx",
			Handler:    _SignerService_SignTx_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _SignerService_NewAccount_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "github.com/maichain/eth-signer/grpc/signer.proto",
}

func init() { proto.RegisterFile("github.com/maichain/eth-signer/grpc/signer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 364 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x4f, 0x4f, 0xfa, 0x40,
	0x14, 0xa4, 0xbf, 0x5f, 0x45, 0xfb, 0x40, 0x12, 0x9e, 0x46, 0x1b, 0x8c, 0x91, 0xf4, 0xc4, 0x85,
	0xd6, 0x60, 0xbc, 0x99, 0x18, 0x0e, 0x7a, 0xd1, 0x88, 0x29, 0xdc, 0x9b, 0xa5, 0xdd, 0x94, 0x8d,
	0xb6, 0x5b, 0x76, 0x17, 0x94, 0xbb, 0x1f, 0xc2, 0x8f, 0x6b, 0xba, 0xcb, 0x5f, 0x89, 0x97, 0x66,
	0x67, 0xe6, 0xe5, 0xbd, 0x99, 0x49, 0xe1, 0x3a, 0x65, 0x6a, 0x32, 0x1b, 0xfb, 0x31, 0xcf, 0x82,
	0x8c, 0xb0, 0x78, 0x42, 0x58, 0x1e, 0x50, 0x35, 0xe9, 0x4a, 0x96, 0xe6, 0x54, 0x04, 0xa9, 0x28,
	0xe2, 0xc0, 0xbc, 0xfd, 0x42, 0x70, 0xc5, 0xd1, 0x2e, 0x29, 0xef, 0xdb, 0x82, 0xe6, 0x48, 0x90,
	0x5c, 0x92, 0x58, 0x31, 0x9e, 0x0f, 0x8a, 0xf2, 0x8b, 0x97, 0x00, 0x8a, 0x47, 0x24, 0x49, 0x04,
	0x95, 0xd2, 0xb5, 0xda, 0x56, 0xc7, 0x09, 0x1d, 0xc5, 0xfb, 0x86, 0xc0, 0x33, 0xa8, 0x92, 0x8c,
	0xcf, 0x72, 0xe5, 0xfe, 0x6b, 0x5b, 0x1d, 0x3b, 0x5c, 0x22, 0xbc, 0x00, 0x27, 0x25, 0x32, 0x7a,
	0x67, 0x19, 0x53, 0xee, 0x7f, 0x2d, 0x1d, 0xa5, 0x44, 0x3e, 0x97, 0x78, 0x25, 0x16, 0x82, 0xc5,
	0xd4, 0xb5, 0xd7, 0xe2, 0x6b, 0x89, 0x11, 0xc1, 0x4e, 0x88, 0x22, 0xee, 0x41, 0xdb, 0xea, 0xd4,
	0x43, 0xfd, 0xf6, 0xa6, 0x70, 0x3c, 0x64, 0x69, 0x3e, 0xfa, 0x0c, 0xe9, 0x74, 0x46, 0xa5, 0x42,
	0x17, 0x0e, 0x77, 0x2d, 0xad, 0x20, 0x3e, 0x02, 0xaa, 0x4d, 0x88, 0x88, 0xeb, 0x14, 0xda, 0x5c,
	0xad, 0x77, 0xee, 0x97, 0x41, 0xfd, 0xbd, 0x90, 0x61, 0x53, 0xfd, 0xa6, 0xbc, 0x7b, 0x68, 0xac,
	0x4e, 0xca, 0x82, 0xe7, 0x92, 0x62, 0x17, 0x50, 0xb7, 0x96, 0x44, 0x5b, 0xd3, 0xfa, 0x7c, 0x3d,
	0x6c, 0x1a, 0x65, 0x6b, 0xb3, 0x37, 0x00, 0x7c, 0xa1, 0x1f, 0xfd, 0x38, 0x2e, 0xfb, 0x58, 0x2f,
	0xf9, 0xdb, 0xf8, 0x15, 0xd4, 0x0a, 0xc1, 0xe6, 0x44, 0xd1, 0xe8, 0x8d, 0x2e, 0xb4, 0x63, 0x27,
	0x84, 0x25, 0xf5, 0x44, 0x17, 0x5e, 0x03, 0xea, 0x0f, 0x59, 0xa1, 0x16, 0xcb, 0x0e, 0x7a, 0x5f,
	0x96, 0x69, 0x85, 0x8a, 0x21, 0x15, 0xf3, 0xb2, 0xba, 0x5b, 0xa8, 0x1a, 0xcf, 0x78, 0x62, 0x92,
	0xee, 0x94, 0xd6, 0x3a, 0xdd, 0x25, 0x8d, 0x23, 0xaf, 0x82, 0x77, 0x00, 0x1b, 0xa7, 0x88, 0x66,
	0x6a, 0xfb, 0x54, 0xcb, 0x35, 0xdc, 0x7e, 0x1e, 0xaf, 0x32, 0xae, 0xea, 0x7f, 0xe8, 0xe6, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x93, 0xde, 0x54, 0xd9, 0x77, 0x02, 0x00, 0x00,
}
